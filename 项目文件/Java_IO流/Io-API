java.io.file类用于表示文件（目录）
File类只用于便是文件（目录）的信息（名称、大小等），不能用于文件内容的访问

RandomAccessFile java提供的对文件内容的访问，既可以读文件，也可以写文件
RandomAccessFile支持随机访问文件，可以访问文件的任意位置

（1）java文件模板
在硬盘上的文件是byte byte byte存储的，是数据的集合
（2）打开文件
有两种模式”rw“（读写）”r“只读
RandomAccessFile raf = new RandomAccessFile("file","rw");
文件指针，打开文件时指针在开头pointer = 0
（3）写方法
raf.write(int) -->只写一个字节（后八位），同事指针指向下一个位置，准备再次写入
（4）读方法
int b = raf.read()---->读一个字节
（5）文件读写完成后一定要关闭（Oracle官方说明）

IO流（输入流、输出流）
字节流、字符流
1.字节流
1）InputStream、Outputstream
  InputStream抽象了应用程序读取数据的方式
  OutputStream抽象了应用程序写出数据的方式
2）EOF = End 读到-1就读到结尾
3）输入流基本方法
 int b = in.read();读取一个字节无符号填充到int低八位，-1是EOF
 in.read(byte[] buf)读取数据填充到字节数组buf
 in.read(byte[] buf,int start,int size)



字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。
字节是计量单位，标识数据量的多少，字符是指计算机中使用的文字和符号

（一）“字节”的定义
字节（Byte）是一种计量单位，表示数据量多少，它是计算机信息技术用于计量存储容量的一种计量单位。
（二）“字符”的定义
字符是指计算机中使用的文字和符号，比如1、2、3、A、B、C、~！·#￥%……—*（）——+、等等。



结论：只要是处理纯文本数据，就优先考虑使用字符流。 除此之外都使用字节流。
输入流只能进行读操作，输出流只能进行写操作，程序中需要根据待传输数据的不同特性而使用不同的流。
in.read（）；  out.write()



输入流：InputStream或者Reader：从文件中读到程序中；
输出流：OutputStream或者Writer：从程序中输出到文件中；









  
























